#!/bin/bash
#
# grep_cluster_transition
#
# (c) 2011 SUSE Linux GmbH, Germany. Author: L.Pinne.
# GNU Public License. No warranty.
#
# Version: 0.1 2011-10-05
#
#set -x

EXE="$0"

CFG="/etc/ClusterTools2/grep_cluster_transition"
test -s $CFG && source $CFG

test -z "/etc/corosync/corosync.conf" &&\
test -z "${CLUSTER_LOG}" &&\
	 CLUSTER_LOG=$(grep "logfile:.*/" /etc/corosync/corosync.conf |\
		 tr -d "    " | cut -d":" -f2)
test -z "${CLUSTER_LOG}" &&\
	 CLUSTER_LOG="/var/log/messages"

ZIPPED_LOG="${CLUSTER_LOG}*bz2"

# TODO: verify cluster log msgs. maybe more generic possible ?
# TODO: update config file from built-in pattern list
# TODO: current DC
test -z "${TRANST_PATTERN}" &&\
	 TRANST_PATTERN="
"NMI.received"
"syslog-ng.shutting.down"
"syslog-ng.starting.up"
"crmd.*quorum.lost"
"stonith:.*failed"
"pengine.fenced.because.*.un-expectedly.down"
"pengine.*fenced.*resource.failure"
"sbd.*Writing.*to"
"sbd.*successfully.delivered"
"sbd.*Received.command"
"

#"crmd.*State.transition.S_IDLE"
#"crmd.*State.transition.S_POLICY_ENGINE"
#"crmd.*State.transition.S_TRANSITION_ENGINE"
#"crmd.*State.transition.S_STARTING"
#"crmd.*State.transition.S_PENDING"
#"crmd.*State.transition.S_ELECTION"
#"crmd.*State.transition.S_INTEGRATION"
#"crmd.*State.transition.S_FINALIZE_JOIN"
#"crmd.*State.transition.S_NOT_DC"


function help() {
	echo "	$(basename $0) [OPTION]"
	echo
	echo " --help		show help."
	echo " --version	show version."
	echo " --zip		search compressed logs, too."
}


# TODO: better awk
function awk_transition() {
	echo "logs: $LOG" >/dev/stderr
	for f in ${LOG}; do
		test -r $f && cat $f
	done | sort -M |\
	awk '$0~/crmd.*State.transition/ {print $1,$2,$3,$4,$11,"->",$13}' |\
	awk '$7=="S_IDLE"{print $0,"\n"}; $7!="S_IDLE"{print $0}' 
}


# TODO: nodes fence, leave, join
function awk_fencing() {
	echo "logs: $LOG" >/dev/stderr
	for f in ${LOG}; do
		test -r $f && cat $f
	done | sort -M |\
	grep -e "pengine:.*Node.*fenced" -e "sbd:.*reset"
}


# main()

case $1 in
	-h|--help)
		help
		exit
	;;
	-v|--version)
		echo -n "$(basename $EXE) "
        	head -11 $EXE | grep "^# Version: "
		exit
	;;
	-z|--zip)
		LOG=""
		for z in ${ZIPPED_LOG}; do
			test -s $z && LOG="${LOG} ${z}"
		done
		# unzipped log has to be last in loop :-/
		test -s ${CLUSTER_LOG} && LOG="${LOG} ${CLUSTER_LOG}"
		awk_transition	
		exit
	;;
	*)
		test -s ${CLUSTER_LOG} && LOG="${CLUSTER_LOG}"
		awk_transition
		exit
	;;
esac
#

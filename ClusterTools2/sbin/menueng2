#!/usr/bin/perl
#
# menueng2
#
# (c) 2009-2010 SUSE Linux GmbH, Germany
# (c) 2011-2014 SUSE Linux Products GmbH, Germany 
# Author: F.Herschel
# GNU General Public License. No warranty.
#

#use strict;
 use Term::ReadLine;
 use Cwd;
 use File::Spec::Functions qw(rel2abs);
 #use File::Basename qw(dirname);
 use File::Basename ;
 use Getopt::Long;

# Getopt::Long::Configure(pass_through);

my $path   = rel2abs( $0 );
our $directory = dirname( $path );

 my $term = new Term::ReadLine 'ClusterService';
 my $prompt = " command: ";
 my $OUT = $term->OUT || \*STDOUT;
 #        while ( defined ($_ = $term->readline($prompt)) ) {
 #          my $res = eval($_);
 #          warn $@ if $@;
 #          print $OUT $res, "\n" unless $@;
 #          $term->addhistory($_) if /\S/;
 #        }

# version 2010-09-30 16:45

#my $cwd = cwd;
#my $rscFile = "$directory/../lib/ClusterService2.rsc";
my $rscFile = "/usr/share/ClusterTools2/Main.rsc";
my $test = 0;
my $count = 0;
my $countf = "";
my $result = 0;
my $help = 0;
my $program = 'menueng2';

my $width_all = 80;
my $width_cmd =  8;
my $width_des = 50;
my $width_status_descr = 20;
my $width_rst = $width_all - $width_cmd - $width_des - 6;

         $result = GetOptions ("rscFile=s"   => \$rscFile,  
                               "help"  => \$help,
                               "verbose"  => \$verbose,
			       "cmd=s" => \$command,
		       		"program=s" => \$program,
		       	);

##@ARGV = (@ARGV, "stop");
#p#rintf ("%s (%s)\n", $command , join(',',@ARGV ));
#foreach $a (@ARGV) {
#	printf ("%s \n", $a);
#}
#exit 99;
$command = join(' ', ( $command , @ARGV) );

if ($help) {
	printf "usage %s:  [--rscFile rscFile] | --help\n", $program;
	printf "usage %s:  [--rscFile rscFile] --cmd \"command command-options\"\n", $program;
	exit 0;
}

# printf("DBG: cmd: %s\n", $command);

               # On Unix returns ("baz", "/foo/bar", ".txt")
                fileparse("/foo/bar/baz.txt", qr/\.[^.]*/);
   my ($menuTitle, $menuDirectories, $menuSuffix) = fileparse($rscFile, qr/\.[^.]*/);

my %rsc2cmd = {};
my %rsc2descr = {};
my %rsc2menu = {};
my %no2rsc = {};
my %no2ctrl = {};
my %no2menu = {};
my %no2cmd = {};
my $menu = "";
my $key = "";
my $cmd; 
my $countF;
my $descr;
my $no = "";
my $cmd;
my @params = [];

sub  menu($) {
	my ($menuS) = shift(@_);
	my $menuItem = "$menuTitle / $menuS";
	my $line1 = "-" x ($width_all-length($menuItem)-4); 
	my $line2 = "-" x ($width_all-2); 
	my $line3 = " " x ($width_all-2);
	printf "+[%s]%s+\n", $menuItem, $line1;
	foreach $no ( sort( keys (%no2rsc))) {
		$key = $no2rsc{$no};
		if ( $key ne "" ) {
			$cmd = $rsc2cmd{$key};
			$descr = $rsc2descr{$key};
			$menu = $rsc2menu{$key};
			if ( $menu eq $menuS ) {
				#printf "DBG: MAIN:  no: %s key: %s cmd: %s\n", $no, $key, $cmd;
				printf "| %-${width_cmd}s : %-${width_des}s%-${width_rst}s|\n", $key, $descr, "";
			}
		} else {
			$menu = $no2menu{$no};
			if ( $menu eq $menuS ) {
				my $crtl = "";
				$ctrl = $no2ctrl{$no};
				# printf "DBG: key empty at no $no\n";
				if ( $ctrl eq "blank" ) {
					printf "+%s+\n", $line3;
				} elsif ( $ctrl eq "bar" ) {
					$descr = $no2descr{$no};
					if ( $descr eq "" )  {
						printf "+%s+\n", $line2;
					} else {
						my $line1 = "-" x ($width_all-length($descr)-4); 
						printf "+<%s>%s+\n", $descr, $line1;
					}
				} elsif ( $ctrl eq "descr" ) {
					$descr = $no2descr{$no};
					$width = ${width_all}-4;
					printf "| %-${width}s |\n", $descr;
				} elsif ( $ctrl eq "status" ) {
					$descr = $no2descr{$no};
					$cmd = $no2cmd{$no};
			#		printf "| %-${width_cmd}s : ", $descr, $descr, "";
				#	system($no2cmd{$no});
					open PIPE, "$no2cmd{$no} |";
					my $status = <PIPE>;
					chomp $status;
					close PIPE;
					$width = ${width_all}-${width_status_descr}-8;
					printf "| %-${width_status_descr}s : %-${width}s |\n", $descr, $status;
				}
			}
		}
	}
	printf "+%s+\n", $line2;
}

sub fillcmd($) {
	my ($cmd) = shift(@_);
	my $replace;
	my $placeholder;
	my $placeholdervar;
	while ( $cmd =~ /(%\{([a-zA-Z0-9]*)\})/ ) {
		$placeholder = "$1";	
		$placeholdervar = "%$2";	
		#printf "DBG: found placeholder %s\n", $placeholder;
		if (@params > 0) {
			$replace = shift @params;
		} else {
			system($rsc2cmd{$placeholdervar});
			$replace = $term->readline(" $rsc2descr{$placeholdervar}: ");
			chomp $replace;
		}
		printf "DBG: found placeholder %s replace with %s\n", $placeholder, $replace;
		$cmd =~ s/$placeholder/$replace/g;
	}
	return $cmd;
}
#
# read (menu) resource file and prepare menue hashes
#
open RSC,"<" . $rscFile or die "did not open $rscFile";
while (<RSC>) {
	if (  !( $_ =~ /^#/ )) {
		chomp;
		$count++;
		$countF = sprintf("%03d", $count);
		($key, $menu, $descr, $cmd, $ctrl) = split(/:/);
		$rsc2cmd{$key} = $cmd;
		$rsc2descr{$key} = $descr;
		$rsc2menu{$key} = $menu;
		$rsc2ctrl{$key} = $ctrl;
		$no2ctrl{$countF} = $ctrl;
		$no2rsc{$countF} = $key;
		$no2menu{$countF} = $menu;
		$no2descr{$countF} = $descr;
		$no2cmd{$countF} = $cmd;
		if ( $ctrl eq "val" )  {
			if ( $descr eq "width_cmd" ) {
				$width_cmd = $cmd;	
                                $width_rst = $width_all - $width_cmd - $width_des - 6;
			}
		}
	}
}

foreach $no ( sort( keys (%no2rsc))) {
	$key = $no2rsc{$no};
	$cmd = $rsc2cmd{$key};
	#/ printf "DBG: no: %s key: %s cmd: %s\n", $no, $key, $cmd;
}


my $call = ""; my $callUC;
my $cont = 1;
my $sendcmd = "";
 #        while ( defined ($_ = $term->readline($prompt)) ) {
 #          my $res = eval($_);
 #          warn $@ if $@;
 #          print $OUT $res, "\n" unless $@;
 #          $term->addhistory($_) if /\S/;
 #        }
my $current_menu = "MAIN";
#
# we got a command from the command line
# 
if ($command ne "" )
{
	# printf "DBG: command: %s\n", $command;
	$call = $command;
}
while ( $cont ) {
	if ($call eq "") {
		menu($current_menu); #printf "select command > ";
		#$call = <STDIN>; 
                $prompt = "[$menuTitle] command: ";
		$call = $term->readline($prompt);
		$term->addhistory($call);
		chomp $call;
	}
        ($cmd, @params) = split (' ',$call);
	$callUC = uc $cmd;
	# $callUC = uc $call;
	# printf "DBG: GOT: %s\n", $callUC;
	# printf "DBG: ctrl: %s\n", $rsc2ctrl{$callUC};
	if ( $rsc2ctrl{$callUC} =~ /^EXIT$/i )  {
		$cont = 0;
	} elsif ( $rsc2ctrl{$callUC} =~ /^MENU$/i ) {
		$current_menu = $rsc2cmd{$callUC};
			#printf "DBG: switch to menu %s\n", $current_menu;
			$call = "";
	} else {
		if ( defined ($rsc2cmd{$callUC}) ) {
			$sendcmd = fillcmd($rsc2cmd{$callUC});
			#printf "DBG: I would like to send: \n%s\n", $sendcmd;
			#printf "+%s+\n", '-' * 63;
			#printf "enter command > ";
			# $call = <STDIN>;
			if ($command ne "" ) {
				printf "+<cmd output>%s+\n", "-" x ($width_all-2-12);
				system($sendcmd);
				printf "+</cmd output>%s+\n", "-" x ($width_all-2-13);
				$cont = 0;
			} else {
				printf "+<cmd output>%s+\n", "-" x ($width_all-2-12);
				system($sendcmd);
				printf "+</cmd output>%s+\n", "-" x ($width_all-2-13);
				$call = $term->readline($prompt);
				$term->addhistory($call);
				chomp $call;
			}
		} else {
			printf "Command not found: %s\n", $callUC;
			$call = "";
		}
	}
}

exit;

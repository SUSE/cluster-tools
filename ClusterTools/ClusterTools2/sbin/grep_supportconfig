#!/bin/bash
#
# grep_supportconfig
#
# (c) 2011 SUSE Linux GmbH, Germany. Author: L.Pinne.
# GNU Public License. No warranty.
#
# Version: 0.01 2012-02-28
#
# For SLES11.
# For Supportconfig Script Version: 2.25-237

EXE=$0
ERR="/dev/null"
TMP="/tmp/cltl.$RANDOM"

CFG="/etc/ClusterTools2/grep_supportconfig"
test -s $CFG && source $CFG

# TODO: make DIR= work
DIR=${2:-$PWD}
FUN=${3:-"chk_overview"}
OWD=$PWD


function echo_msgsep() {
	echo "============================================================ ${1:0:14} ==="
}


function split_file(){
	F=$1
	mkdir -p ${TMP}/$F
	cp $F ${TMP}/${F}/
	cd ${TMP}/$F
#	csplit $F /^#==\[ [a-zA-Z] ^C \]==*#$/ {*}
	csplit $F /^#==..Co.*===========================#$/ {*} >>$ERR
	cd $OLDPWD
}


function chk_hardware() {

	echo_msgsep $FUNCNAME

	echo "machine:"
	FIL="hardware.txt"
	grep "system.hardware.*=" $FIL | grep -v "system.*video"
	grep "system.firmware.*=" $FIL
	grep -e "Manufacturer:.\"[A-Za-z]" -e "Product:.\"" -e "Product.id:.\"" -e "Serial:.\"" $FIL | sort -u
	grep -e "str3:.\"../../....\"" -e "str5:.\"[A-Za-z]" $FIL |\
		 grep -v "Unknown"
	grep -A4 "^# Virtuali.ation" $FIL
	echo
	
	echo "processor:"
	FIL="hardware.txt"
	grep -A16 "^# /usr/bin/lscpu" $FIL
	grep "^model.name.*:" $FIL | sort -u
	FIL="boot.txt"
	grep -e "^\[.*Detected.*MHz.processor" -e "^\[.*Brought up.*CPUs" $FIL
	echo

	echo "memory:"
	FIL="boot.txt"
	grep "System RAM: " $FIL | sort -u

	FIL="basic-health-check.txt"
	grep -A 4 "# /usr/bin/free -k" $FIL | tail -3 
	echo

# TODO: more specific patterns
#	FIL="hardware.txt"
#	for f in "iLO" "IPMI" "DRAC" "Emulex" "Brocade" "QLogic" "Broadcom" "MPT"; do
#		grep -e ${f} -e "pci.product.=" $FIL | sort -u
#	done

	echo "boards:"
	FIL="hardware.txt"
	grep "pci.product.=" $FIL |\
		 grep -v "USB.*HCI.*ontroller" | grep -v "PCI.*Port" |\
		 grep -v "I/O Hub" | grep -v "Integrated.Memory.Controller" | sort -u
	grep "scsi.vendor.=" $FIL | sort -u
	echo

	echo "disk:"
	FIL="fs-diskio.txt"
	grep -A1 "^Model:" $FIL | grep -v "^--$"
	echo

	echo "storage:"
	FIL="mpio.txt"
	grep "Vendor:.*Model:.*Rev:" $FIL | sort -u
	echo
	FIL="hardware.txt"
	for f in "supports.DPO.and.FUA" "support.DPO.or.FUA"; do
		echo -n "${f} : "
		grep -c ${f} $FIL
	done
	FIL="messages.txt"
	for f in "disabling.barriers"; do
		echo -n "${f} : "
		grep -c ${f} $FIL
	done
	echo

	echo "network_card:"
	FIL="network.txt"
	test -z "${NIC_PTRN}" &&\
	NIC_PTRN="
Model:
Device.File:
"	
	# TODO: better loop
	for f in $NIC_PTRN; do
		grep -A20 "^..: PCI.*Ethernet controller" $FIL |\
		grep $f
	done | sort -u | sed s/Device.File:/"NIC Device File:"/g
	echo	
}


function chk_modules() {

	echo_msgsep $FUNCNAME

	# tainted [ 4086.446776]
	grep -e "Modules.linked.in:.*(..)" -e "Modules.linked.in:.*(.)" boot.txt |\
		cut -b16- | sort -u 
	echo

	FIL="boot.txt"
	grep "^\[.*AppArmor:.*initialized" $FIL
	echo

	# TODO: add Cisco HBA
	# TODO: test HP eth  nx_nic, be2net
	test -z "${HARDW_MOD}" &&\
	HARDW_MOD="
netxen_nic.ko
nx_nic.ko
bfa.ko
lpfc.ko
qlge.ko
qla2xxx.ko
bnx2.ko
bnx.ko
e1000.ko
tg3.ko
be2net.ko
be2iscsi.ko
cciss.ko
mptbase.ko
dm_multipath.ko
dm_mirror.ko
bonding.ko
hpwdt.ko
hangcheck-timer.ko
ibmasr.ko
iTCO_wdt.ko
softdog.ko
"
	FIL="boot.txt"
	for m in INITRD_MODULES MODULES_LOADED_ON_BOOT; do
		grep "^${m}=" $FIL
	done
	echo
	for m in $HARDW_MOD; do
		grep ${m} $FIL | sort -u
		n=$(basename ${m} .ko)
		grep "modprobe ${n}" $FIL
	done
	echo
# TODO: see below - use split files to records instead of -A9, to find "supported:"
	FIL="modules.txt"
	for m in $HARDW_MOD; do
		grep -A9 "^filename:.*${m}" $FIL |\
		 awk '$1=="filename:" || $1=="license:" || $1=="supported:" {print $0}' 
	done
	echo
	for m in $HARDW_MOD; do
		n=$(basename ${m} .ko)
		grep "options ${n}" $FIL
	done
	echo
	FIL="modules.txt"
	split_file $FIL
	f=$(grep -l "^# /sbin/lsmod$" ${TMP}/${FIL}/xx*)
	test -z "$f" ||\
		grep -vh "^#==..Co.*==#" $f | sort -u | grep -v "#"
	rm -rf ${TMP}/${FIL}
	echo	
	echo -n "process on watchdog : "
        awk '$9=="/dev/watchdog" {print $1,$9}' open-files.txt
	echo
	echo
}


function chk_services() {

	echo_msgsep $FUNCNAME

	FIL="boot.txt"
	grep "exits with status" $FIL | grep -v "exits with status 0$"
 	grep "Skipped.features:" $FIL | sort -u
	echo
	grep "INIT: Entering runlevel:" $FIL | sort -u
	echo

	FIL="chkconfig.txt"
	for p in "3:on" "3:off"; do
		echo -n "${p} : "
		grep -c "${p}" $FIL
	done
	echo

# TODO: precheck_for_sap
	test -z "${SVC_YES}" &&\
	SVC_YES="
boot.clock
boot.devicemapper
boot.lvm
boot.multipath
boot.sapconf
boot.sysstat
boot.sysctl
multipathd
ntp
"
	test -z "${SVC_OFF}" &&\
	SVC_OFF="
boot.dmraid
boot.md
alsasound
hp-asrd
ipmi
mdadmd
oracle
openais
powerd
slpd
smartd
sapinit
uuidd
"
	echo "service should be on:"
	for s in $SVC_YES; do
		grep "${s}:..on" $FIL
		grep "${s}:..off" $FIL
		grep "^${s}.*0:.*3:on" $FIL | grep -v "boot\."
		grep "^${s}.*0.*3:off" $FIL | grep -v "boot\."
	done
	echo
	echo "service should be off:"
	for s in $SVC_OFF; do
		grep "${s}:..off" $FIL
		grep "${s}:..on" $FIL
		grep "^${s}.*0.*3:off" $FIL | grep -v "boot\."
		grep "^${s}.*0.*3:on" $FIL | grep -v "boot\."
	done
	echo
}


function chk_veritas() {

	echo_msgsep $FUNCNAME

	echo "Veritas Storage Foundation and Veritas Cluster Services"
	echo
	grep -e "Modules.linked.in:.*(..)" -e "Modules.linked.in:.*(.)" boot.txt |\
		cut -b16- | sort -u
	echo

	test -z "${VRT_SVC_YES}" &&\
	VRT_SVC_YES="
boot.vxfs
qlremote
amf
isisd
gab
llt
mcelog
vcs
vras-vradmind.sh
vxatd
vxdbdctrl
vxdcli
vxfen
vxnm-vxnetd
vxodm
vxpbx_exchanged
vxrsyncd.sh
vxvm-boot
vxvm-reconfig
vxvm-recover
sfmh-discovery
xprtld
eccmad
"
	FIL="chkconfig.txt"
	for s in $VRT_SVC_YES; do
		grep "${s}:..on" $FIL
		grep "${s}:..off" $FIL
		grep "^${s}.*0:.*3:on" $FIL | grep -v "boot\."
		grep "^${s}.*0.*3:off" $FIL | grep -v "boot\."
	done
	echo
#
#VRT_MOD="
#vxfen
#gab
#vxodm
#llt
#dmpaa
#vxspec
#vxio
#vxdmp
#vxportal
#fdd
#vxfs
#"
#
	test -z "${VRT_ERR_PTRN}" &&\
	VRT_ERR_PTRN="
"GAB.*failed"
"Symantec.Technical.Support"
"error.*VRT"
"VCS.CRITICAL"
"vxvm.*volume.*not"
"
	LOG="boot.txt messages.txt"
	for e in ${VRT_ERR_PTRN}; do
		echo -n "${e} : "
		for f in ${LOG}; do
			cat $f
		done | grep -ic ${e} 
	done
	echo
	grep "^#./etc/vx" etc.txt
	grep "^#./etc/opt/VRT" etc.txt
	echo

	FIL="fs-diskio.txt"
	echo -n "VxDMP: "
	grep -c "VxDMP.*/devices/virtual/block/VxDMP" $FIL
	echo -n "VxVM:  "
	grep -c "VxVM.*/devices/virtual/block/VxVM" $FIL
	echo
}


function chk_network() {

	echo_msgsep $FUNCNAME
	
	test -z "${NETW_PTRN}" &&\
	NETW_PTRN="
"Setting.up.hostname"
"Setting.up.loopback.interface"
"eth.*IP.address:.*/"
"bond.*enslaved.interface:"
"bond.*IP.address:.*/"
"
	FIL="boot.txt"
	echo "boot setup:"
	for p in $NETW_PTRN; do
		grep $p $FIL
	done | sort -u
	echo "last setup:"
	FIL="network.txt"
	for p in $NETW_PTRN; do
		grep $p $FIL
	done | sort -u
	echo

	FIL="network.txt"
	( grep -A3 "^# /sbin/ethtool bond" $FIL
	grep -A18 "^# /sbin/ethtool eth" $FIL ) |\
		 grep -v "^#==\[ " | grep -v "^# /sbin/ethtool" | grep -v "^--$"
	echo
	
# TODO: summary num. NICs, num. "not connected"
	( grep -A3 "^# /etc/sysconfig/network/routes$" $FIL ) |\
		 grep -v "^#==\[ " | grep -v "^# /sbin/ethtool"

	( grep -A13 "^# /etc/sysconfig/network/ifcfg-bond" $FIL |\
		grep -v "=''$"
		echo
	grep -A21 "^# /proc/net/bonding/bond" $FIL

	grep -A10 "^# /etc/sysconfig/network/ifcfg-eth" $FIL |\
		 grep -v "=''$" ) |\
		 grep -v "^#==\[ " 
	echo
}


function chk_nameres() {

	echo_msgsep $FUNCNAME

	FIL="network.txt"
	( grep -A1 "^# /etc/HOSTNAME" $FIL
	grep -A1 "^# /bin/hostname" $FIL
	grep -A1 "^# /sbin/chkconfig nscd" $FIL ) |\
		 grep -v "^#==\[ " 
	echo
	split_file $FIL 

	echo "# /etc/hosts:"
	f=$(grep -l "^# /etc/hosts$" ${TMP}/${FIL}/xx*)
        test -z "$f" ||\
        	grep -v "^#" $f | tr -s "\n"
	echo
	echo "# /etc/resolv.conf:"
	f=$(grep -l "^# /etc/resolv.conf$" ${TMP}/${FIL}/xx*)
        test -z "$f" ||\
        	grep -v "^#" $f | tr -s "\n"
	echo
#	echo "# /etc/nsswitch.conf:"
#	f=$(grep -l "^# /etc/nsswitch.conf$" ${TMP}/${FIL}/xx*)
#	test -z "$f" ||\
#       	grep -v "^#" $f | tr -s "\n"
#	echo
	echo "# /etc/host.conf:"
	f=$(grep -l "^# /etc/host.conf$" ${TMP}/${FIL}/xx*)
        test -z "$f" ||\
        	grep -v "^#" $f | tr -s "\n"

        rm -rf ${TMP}/${FIL}
	echo

# TODO: DNS
}


function chk_timeres() {

	echo_msgsep $FUNCNAME

	FIL="ntp.txt"
	echo "software:"
	for p in "^#.rpm.-V" "^#.Verification.Status:"; do
		grep ${p} $FIL
	done
	echo
	echo "service:"
	grep -A1 "^# /sbin/chkconfig" $FIL
	grep -A5 "# /usr/sbin/ntpq -p" $FIL | grep -v "====="

	echo "config:"
	echo "# /etc/ntp.conf:"
	split_file $FIL 
	f=$(grep -l "^# /etc/ntp.conf$" ${TMP}/${FIL}/xx*)
        test -z "$f" ||\
		grep -v "^#" $f | tr -s "\n"
	f=$(grep -l "^NTPD_FORCE_SYNC_ON_STARTUP=" ${TMP}/${FIL}/xx*)
        test -z "$f" ||\
		grep -v "^#" $f | tr -s "\n"

        rm -rf ${TMP}/${FIL}
	echo

	test -z "${TIME_ERR}" &&\
	TIME_ERR="
"synchronized.to.LOCAL"
"ntpd.*time.reset"
"ntpd.*failed"
"
	echo "errors:"
	for p in $TIME_ERR; do
		echo -n "${p} : "
		grep -c ${p} $FIL
	done
	echo

	echo "hwclock:"
	FIL="sysconfig.txt"
	test -z "${TIME_PTRN}" &&\
	TIME_PTRN="
HWCLOCK
SYSTOHC
TIMEZONE
DEFAULT_TIMEZONE
"
	for p in $TIME_PTRN; do
		grep "^${p}" $FIL | sort -u
	done
	echo

	FIL="etc.txt"
	grep -A4 "^/etc/adjtime" $FIL
	echo

# TODO: elevenmin mode, ...
}


function chk_cluster() {

	echo_msgsep $FUNCNAME

	# TODO: check /etc/corosync/
	# TODO: check ???, see sum_base_config, whbsaprecheck
	# TODO: check watchdogs, define $WATCHMOD, see disbale_other_watchdog
	# hangcheck_timer here, not "-" as in hangcheck-timer.ko
	WATCHMOD="hpwdt hangcheck_timer iTCO ibmasr softdog"
	echo -n "loaded watchdog:"
	for m in $WATCHMOD; do
		awk '$1=="'${m}'" {print $1}' modules.txt | sort -u
		awk '$2=="'${m}'" {print $*}' boot.txt | sort -u
	done
	echo
        echo -n "process on watchdog : "
        awk '$9=="/dev/watchdog" {print $1,$9}' open-files.txt
        echo

}


function chk_sap() {

	echo_msgsep $FUNCNAME

	# TODO: check /etc/sysconfig/sapconf
	# TODO: check ???, see sum_base_config, precheck_for_sap
	grep -e "^@sapsys" -e "^@sdba" crash.txt
	echo
}


function chk_oracle() {

	echo_msgsep $FUNCNAME

	echo "standalone Oracle installation"
	echo
	# TODO
	echo -n "sysconfig found :"
	grep -e "/etc/sysconfig/oracle" etc.txt
	# TODO show config settings of that file
	grep -e "^oracle" -e "^@dba" crash.txt
	echo
	grep "^tmpfs" basic-health-check.txt	
	grep "^vm.nr_hugepages.=" env.txt	
	echo
	# TODO: check ???, see sum_base_config, whbsaprecheck
	
	FIL="rpm.txt"
        test -z "${ORA_SFT_PTRN}" &&\
        ORA_SFT_PTRN="
orarun
oracleasmlib oracleasm-support
cups-client cups-drivers cups-libs cups-libs-32bit cups cups-autoconfig
xorg-x11-libs xorg-x11
nfs-client
glibc glibc-32bit glibc-locale glibc-locale-32bit glibc-devel
kernel-default linux-kernel-headers
binutils gcc gcc-32bit gcc43 gcc-locale gcc-locale libgcc43 libgcc43-32bit
libaio libaio-devel
sysstat supportutils suse-sam
multipath-tools mdadm device-mapper device-mapper-32bit libext2fs2
ClusterTools2
"
	echo "RPM needed :"
        for p in $ORA_SFT_PTRN; do
                echo ${p}
        done
	echo
	echo "RPM found :"
        for p in $ORA_SFT_PTRN; do
                awk '$1=="'${p}'" {print $0}' $FIL
        done
        echo
# TODO
	test -z "${ORA_SVC_YES}" &&\
	ORA_SVC_YES="
boot.clock
boot.dmraid
boot.md
boot.devicemapper
boot.lvm
boot.multipath
boot.sysstat
boot.sysctl
multipathd
mdadmd
ntp
oracle
"
	test -z "${ORA_SVC_OFF}" &&\
	ORA_SVC_OFF="
boot.sapconf
alsasound
ipmi
openais
powerd
slpd
smartd
sapinit
"
	FIL="chkconfig.txt"
	echo "service needed :"
	for s in $ORA_SVC_YES; do
		echo $s
	done
	echo
	echo "service found :"
	for s in $ORA_SVC_YES; do
		grep "${s}:..on" $FIL
		grep "${s}:..off" $FIL
		grep "^${s}.*0:.*3:on" $FIL | grep -v "boot\."
		grep "^${s}.*0.*3:off" $FIL | grep -v "boot\."
	done
	echo
	echo "service should be off :"
	for s in $ORA_SVC_OFF; do
		grep "${s}:..off" $FIL
		grep "${s}:..on" $FIL
		grep "^${s}.*0.*3:off" $FIL | grep -v "boot\."
		grep "^${s}.*0.*3:on" $FIL | grep -v "boot\."
	done
        echo
}


function chk_kernel() {
	
	echo_msgsep $FUNCNAME

	FIL="boot.txt"
	grep -A1 "^# /bin/uname -a" $FIL
	grep -A1 "^# /proc/cmdline" $FIL

	grep "^\[.*Booting paravirtualized kernel on bare hardware" $FIL

	echo -n "kernel.tainted : "
	grep "^kernel.tainted.=" env.txt
	echo
}


function chk_software() {

	echo_msgsep $FUNCNAME
	
	FIL="basic-environment.txt"

	grep -A3 "# /etc/SuSE-release" $FIL
	echo
	grep -A1 "# /etc/lsb-release" $FIL
	echo	

	FIL="sam.txt"
	grep -A4 "\.prod:" $FIL
	echo

	FIL="rpm.txt"
	grep "(none)" $FIL | grep -v "gpg-pubkey"
	echo	

	FIL="sam.txt"
	test -z "${SOFTW_PTRN}" &&\
	SOFTW_PTRN="
System.architecture:
Baseproduct:
not.our.package:
"	
	for p in $SOFTW_PTRN; do
		grep "${p}" $FIL
	done
	echo
}


function chk_updates() {

	echo_msgsep $FUNCNAME
	
	FIL="updates.txt"
	# TODO sles-for-sap
	# TODO
	test -z "${UPDT_PTRN}" &&\
	UPDT_PTRN="
"SLES11-"
"SLES11-SP"
"SLE11-HAE-"
"SLE11-HAE-SP"
"
	for p in ${UPDT_PTRN}; do
		grep "|.*|.${p}.*|.*|" $FIL | sort -u
	done
	echo
	grep "patches.needed" $FIL
	echo
}


function chk_multipath() {
	
	echo_msgsep $FUNCNAME
	
	FIL="mpio.txt"
	for p in "^#.rpm.-V" "^#.Verification.Status:"; do
		grep "${p}" $FIL
	done
	grep "^#.RPM.Not.Installed:" $FIL
	echo

	for p in "^boot.device-mapper.*o" "^boot.multipath.*o" "^multipathd.*0:.*3:on"; do
		grep ${p} $FIL
	done
	echo
	
	grep -B1 "^size=.*features=.*hwhandler=" $FIL |\
		sed s/^size/"	size"/g | grep -v "^--$"
	echo
	# TODO: by-id
	# TODO: dmsetup
	# TODO: multipath.conf
	# TODO check for un-matched userfreindly names (mpath[a-z])
	for p in "loading.*prioritizer" "path.checker.=" "prio.="; do
		grep ${p} $FIL
	done | awk '{print $6,$7,$8}' | sort -u
	echo
}
		

function chk_filesys() {
	
	echo_msgsep $FUNCNAME
	
	FIL="fs-diskio.txt"
	
	split_file $FIL 
	
	F=$(grep "# /etc/fstab" $TMP/$FIL/xx* | tr -d ":#" | awk '{print $1}')
	grep -v "#==" $F | tr -s " "
	F=$(grep "# /bin/mount" $TMP/$FIL/xx* | tr -d ":#" | awk '{print $1}')
	grep -v "#==" $F | tr -s " "
	# TODO define meaningful limits for await and svctm	
	# TODO make limits for await and svctm a config parameter	
	F=$(grep "# /usr/bin/iostat" $TMP/$FIL/xx* | tr -d ":#" | awk '{print $1}')
	awk ' $1=="Device:" {print $0}
		$10 > 100.0 {print $0}
		$11 > 20.0 {print $0}' $F | sort -u
	echo
}


function chk_storage() {
	
	echo_msgsep $FUNCNAME

	FIL="rpm.txt"
	# TODO: see whbsaprecheck
	test -z "${STOR_PKG}" &&\
	STOR_PKG="
dmraid
lvm2
libext2fs2
mdadm
multipath-tools
nfs-client
open-iscsi
ocfs2-tools
ocfs2-kmp-default
xfsprogs
"
	echo "software:"
	for p in $STOR_PKG; do
		awk '$1=="'$p'" {print $1,$NF} ' $FIL
	done
	echo
	# TODO check if local disk is in multipath
	# TODO: nfs
	test -z "${STOR_MOD}" &&\
	STOR_MOD="
ext2
ext3
ocfs2
xfs
"	
	echo "disk:"
	FIL="fs-diskio.txt"
	#grep -B1 "^Disk./dev/" $FIL
	grep -A1 "^Model:" $FIL | grep -v "^--$"
	echo
	
	FIL="lvm.txt"
	FIL="fs-softraid.txt"
	
	echo
}


function chk_overview() {
	
	echo_msgsep $FUNCNAME

	#FIL="supportconfig.txt"
	#grep "Script.Version:" $FIL
	FIL="network.txt"
	echo -n "Hostname: "
	grep -A1 "#./etc/HOSTNAME" $FIL | tail -1
	FIL="basic-health-report.txt"
	echo "Supportconfig: " $DIR
	for p in "^Date.Checked:" "^Status:" "\[...Red...\]" "\[.Yellow..\]"; do
		grep ${p} $FIL
	done
	echo
}


function chk_sysconf() {

	echo_msgsep $FUNCNAME

	SYSC_PTRN="
fs.file-max
fs.aio-max-nr
kernel.panic_on_oops
kernel.panic
kernel.sem
kernel.shmall
kernel.shmmax
kernel.shmmni
net.ipv4.ip_local_port_range
net.core.rmem_default
net.core.rmem_max
net.core.wmem_default
net.core.wmem_max
vm.dirty_*
vm.nr_pdflush_threads
vm.min_free_kbytes
vm.nr_hugepages
vm.swappiness
vm.overcommit_memory
vm.max_map_count
vm.hugetlb_shm_group
vm.nr_hugepages
"
	# TODO get really active settings
#	FIL="proc.txt"
#	PROC_PTRN=$(echo $SYSC_PTRN | tr "." "/" )
	FIL="env.txt"
	PROC_PTRN=$SYSC_PTRN
	echo "proc : "
	for m in ${PROC_PTRN}; do
#		grep -A1 "${m}" $FIL
		grep "^${m}" $FIL
	done | tr -s " " | tr "	" " " | sort -u
	echo
	FIL="etc.txt"
	echo "sysctl.conf : "
	for m in ${SYSC_PTRN}; do	
		grep ^$m $FIL
	done | sort -u
	echo
	# TODO security/limits.conf
	# TODO tmpfs
	FIL="env.txt"
	split_file $FIL
	F=$(grep "# ulimit -a" $TMP/$FIL/xx* | tr -d ":#" | awk '{print $1}')
        grep -v "#==" $F | tr -s " "

	FIL="sysconfig.txt"
	split_file $FIL
	F=$(grep "# /etc/sysconfig/ulimit" $TMP/$FIL/xx* | tr -d ":#" | awk '{print $1}')
	grep -v "#==" $F | tr -s " "
}


function chk_sysload() {

	echo_msgsep $FUNCNAME
	
	FIL="basic-health-report.txt"	
	echo "basic-health-report:"
	grep "^[A-Z].*\[....e....\]$" $FIL | grep -v "Kernel.Taint"
	# TODO: make dfull work
	dfull="X"
	dfull=$( grep "%.>=.90%" $FIL )
	test "${dfull}" = "X" &&\
	(	echo "Used Disk Space:"
		echo $dfull
	)
	echo

	OWD=$PWD
	cd sar || exit
	# TODO: print date of sar file to each output line
	#	either by adding date from sar-fiel header,
	#	or by grep-ing the alreday known maxima out of the files
	# TODO: reduce number of columns

	echo "max. load-avg15:"
	echo "hh:mm:ss xM   runq-sz  plist-sz   ldavg-1   ldavg-5  ldavg-15"
	for f in sa??; do
		sar -q -f $f
	done | grep "^[0-9][0-9]:" | sort -n -k7 | tail

	echo "max. user CPU utilisation:"
	echo "hh:mm:ss xM     CPU     %user     %nice   %system   %iowait    %steal     %idle"
	for f in sa??; do
		sar -f $f
	done | grep "^[0-9][0-9]:" | grep -v "%" | sort -n -k4 | tail

#	echo "max. system CPU utilisation:"
#	echo "hh:mm:ss xM     CPU     %user     %nice   %system   %iowait    %steal     %idle"
#	for f in sa??; do
#		sar -f $f 
#	done | grep "^[0-9][0-9]:" | grep -v "%" | sort -n -k6 | tail

	echo "max. iowait CPU utilisation:"
	echo "hh:mm:ss xM     CPU     %user     %nice   %system   %iowait    %steal     %idle"
	for f in sa??; do
		sar -f $f
	done | grep "^[0-9][0-9]:" | grep -v "%" | sort -n -k7 | tail

#	echo "max. interrupts:"
#	echo "hh:mm:ss xM       INTR    intr/s"
#	for f in sa??; do
#		sar -I SUM -f $f
#	done | grep "^[0-9][0-9]:" | sort -n -k4 | tail

#	echo "max. disk write tps:"
#	echo "hh:mm:ss xM       tps      rtps      wtps   bread/s   bwrtn/s"
#	for f in sa??; do
#		sar -f $f 
#	done | grep "^[0-9][0-9]:" | sort -n -k5 | tail

	echo "max. disk write blocks:"
	echo "hh:mm:ss xM       tps      rtps      wtps   bread/s   bwrtn/s"
	for f in sa??; do
		sar -f $f 
	done | grep "^[0-9][0-9]:" | sort -n -k7 | tail

#	echo "max. disk read tps:"
#	echo "hh:mm:ss xM       tps      rtps      wtps   bread/s   bwrtn/s"
#	for f in sa??; do
#		sar -f $f 
#	done | grep "^[0-9][0-9]:" | sort -n -k4 | tail

	echo "max. disk read blocks:"
	echo "hh:mm:ss xM       tps      rtps      wtps   bread/s   bwrtn/s"
	for f in sa??; do
		sar -f $f 
	done | grep "^[0-9][0-9]:" | sort -n -k6 | tail

	echo "max. swap used:"
	echo "hh:mm:ss xM kbswpfree kbswpused  %swpused  kbswpcad   %swpcad"
	for f in sa??; do
		sar -f $f 
	done | grep "^[0-9][0-9]:" | sort -n -k4 | tail

	echo "max. pageout:"
	echo "hh:mm:ss xM pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff "
	for f in sa??; do
		sar -B -f $f 
	done | grep "^[0-9][0-9]:" | sort -n -k4 | tail

#	# find lowest vmeff% that is not 0.00. 0.00 means "nothing done".
#	echo "min. vmeff:"
#	echo "hh:mm:ss xM pgpgin/s pgpgout/s   fault/s  majflt/s  pgfree/s pgscank/s pgscand/s pgsteal/s    %vmeff "
#	for f in sa??; do
#		sar -B -f $f 
#	done | grep "^[0-9][0-9]:" | grep -v "%" |\
#	 	awk '$11 != "0.00" {print}' | sort -n -k11 | head

	# TODO: sum up buffer+cache, estimated use memory 
	echo "max. memory commit:"
	echo "hh:mm:ss xM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit"
	for f in sa??; do
		sar -r -f $f 
	done | grep "^[0-9][0-9]:" | sort -n -k8 | tail

	echo "max. memory cache:"
	echo "hh:mm:ss xM kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit"
	for f in sa??; do
		sar -r -f $f 
	done | grep "^[0-9][0-9]:" | sort -n -k7 | tail

#	echo "max. network write tps:"
#	echo "hh:mm:ss xM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s"
#	for f in sa??; do
#		sar -n DEV -f $f 
#	done | grep "^[0-9][0-9]:" | grep bond | sort -n -k5 | tail

	echo "max. network write kB:"
	echo "hh:mm:ss xM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s"
	for f in sa??; do
		sar -n DEV -f $f 
	done | grep "^[0-9][0-9]:" | grep bond | sort -n -k7 | tail

#	echo "max. network read tps :"
#	echo "hh:mm:ss xM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s"
#	for f in sa??; do
#		sar -n DEV -f $f 
#	done | grep "^[0-9][0-9]:" | grep bond | sort -n -k4 | tail

	echo "max. network read kB:"
	echo "hh:mm:ss xM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s"
	for f in sa??; do
		sar -n DEV -f $f 
	done | grep "^[0-9][0-9]:" | grep bond | sort -n -k6 | tail

	# TODO: network errors?
	# TODO: NFS client and server reports?
	# TODO: grep -A6 "numastat" sysctl.txt 

	cd $OWD 
	echo
}


function chk_errors() {
	
	echo_msgsep $FUNCNAME

	# TODO: see grep_error_patterns
	test -z "${ERRCFG}" &&\
		ERRCFG="/etc/ClusterTools2/grep_error_patterns"
	test -s $ERRCFG && source $ERRCFG
 
	# TODO: taint.flag ??
	echo -n "kernel.tainted : "
	grep "^kernel.tainted.=" env.txt

	# TODO: add plugin-messages.txt, man supportconfig for plugin
	# TODO: find start and end time for each log files

	FIL="messages.txt"
	FRST=$(grep -A1 "# /var/log/messages - Last.*Lines" $FIL |\
		tail -1 | awk '{print $1,$2,$3}')
	echo "$FIL starts $FRST"
	
	LOG="boot.txt messages.txt proc.txt ha.txt"
	for e in ${ERROR_PATTERN} ${CLUERR_PATTERN}; do
		echo -n "${e} : "
		for f in ${LOG}; do
			cat $f
		done | grep -ic ${e} 
	done
	echo
}


# main()

case $1 in
	--help|-h)
		BEX=$(basename $EXE)
		echo "usage: $BEX OPTION"
		echo "usage: $BEX --generic <DIR>"
		echo "usage: $BEX --function <DIR> <FUNC>"
		echo
		echo "OPTION:"
                echo " --help		show help."
                echo " --listfunc	show available functions."
                echo " --version	show version."
                echo " --generic	show generic info."
                echo " --function	show info from selected function."
		exit
	;;
	--version|-v)
		echo -n "$(basename $EXE) "
		head -11 $EXE | grep "^# Version: "
		exit
	;;
	--listfunc|-l)
		awk '$1=="function" && $2~/^chk_/ {print $2}' $EXE | sort
		exit
	;;
	--generic|-g)
		cd $DIR
		chk_overview
		chk_hardware
		chk_kernel
		chk_modules
		chk_multipath
		chk_storage
		chk_filesys
		chk_network
		chk_nameres
		chk_timeres
		chk_software
		chk_updates
		chk_services
		#chk_cluster
		chk_sysconf
		chk_errors
		chk_sysload

		rm -rf $TMP
		exit
	;;
	--function|-f)
		cd $DIR
		shift
		if [ $# -gt 1 ]; then	
			for f in $*; do
				EXE=$(type -p $0)
				grep "^function ${f}()..$" $EXE && $f
				shift
			done
		else $FUN
		fi

		rm -rf $TMP
		exit
	;;
	--test|-t)
		cd $DIR
		#set -x
		#split_file modules.txt
		chk_sysconf
		#chk_filesys	

		rm -rf $TMP
		exit
	;;
esac
#
